{
  "address": "0xE8412eD89821BA4f11e9f6b80c8295a2FDE09945",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_entropyManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_idGenerator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SET_ATTRIBUTES_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SET_DNA_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SET_ENTROPY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "burnToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entropyManager",
      "outputs": [
        {
          "internalType": "contract IEntropyManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "entropyStorage",
      "outputs": [
        {
          "internalType": "bool",
          "name": "finished",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getEntropy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getOwnedTokenIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenOrigin",
      "outputs": [
        {
          "internalType": "uint256[2]",
          "name": "",
          "type": "uint256[2]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "hasEntropy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "idGenerator",
      "outputs": [
        {
          "internalType": "contract IScoutsIdGenerator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metadata_uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_randomSeeds",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_reedemerName",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_generatorTokenId",
          "type": "uint256"
        }
      ],
      "name": "mintScout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_attribute",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_value",
          "type": "string"
        }
      ],
      "name": "setAttribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_dna",
          "type": "string"
        }
      ],
      "name": "setDNA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_randomness",
          "type": "uint256"
        }
      ],
      "name": "setEntropy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_entropyManager",
          "type": "address"
        }
      ],
      "name": "setEntropyManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newIdGenerator",
          "type": "address"
        }
      ],
      "name": "setIdGenerator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_new_uri",
          "type": "string"
        }
      ],
      "name": "setMetadataURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "tokenAttributes",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenDNA",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenGenerator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "withdrawNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x514896dc168b5bd707878d8fa04f75084cdd1dcaed21aa09a42a36fc8621bdbd",
  "receipt": {
    "to": null,
    "from": "0x0Bae1695AD0034E0Eb1c121DF904AB919Ae4951A",
    "contractAddress": "0xE8412eD89821BA4f11e9f6b80c8295a2FDE09945",
    "transactionIndex": 1,
    "gasUsed": "2802495",
    "logsBloom": "0x
    "blockHash": "0x4446eef3c3135e260e04b637a79d09fbb2e9b3d1fb448154e7d23975815173bb",
    "transactionHash": "0x514896dc168b5bd707878d8fa04f75084cdd1dcaed21aa09a42a36fc8621bdbd",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 23479814,
        "transactionHash": "0x514896dc168b5bd707878d8fa04f75084cdd1dcaed21aa09a42a36fc8621bdbd",
        "address": "0xE8412eD89821BA4f11e9f6b80c8295a2FDE09945",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000bae1695ad0034e0eb1c121df904ab919ae4951a",
          "0x0000000000000000000000000bae1695ad0034e0eb1c121df904ab919ae4951a"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x4446eef3c3135e260e04b637a79d09fbb2e9b3d1fb448154e7d23975815173bb"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 23479814,
        "transactionHash": "0x514896dc168b5bd707878d8fa04f75084cdd1dcaed21aa09a42a36fc8621bdbd",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000000bae1695ad0034e0eb1c121df904ab919ae4951a",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000013e9b56c9552080000000000000000000000000000000000000000000000000b39ef2b84a1853c00000000000000000000000000000000000000000000034e5cd99f36e6780bda0000000000000000000000000000000000000000000000000b260576180c333400000000000000000000000000000000000000000000034e5ced88ec530d5de2",
        "logIndex": 3,
        "blockHash": "0x4446eef3c3135e260e04b637a79d09fbb2e9b3d1fb448154e7d23975815173bb"
      }
    ],
    "blockNumber": 23479814,
    "cumulativeGasUsed": "2961282",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Test Youth Scouts",
    "TYS",
    "0x23A8E2c5EaD54d1b02D09275E293eBeB820B126e",
    "0xa5299B89c5f1e8A6D525B801f42342dc18335964"
  ],
  "solcInputHash": "ea7a4c131030fd6d2dcd25240a42e522",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_entropyManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_idGenerator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SET_ATTRIBUTES_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SET_DNA_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SET_ENTROPY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burnToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entropyManager\",\"outputs\":[{\"internalType\":\"contract IEntropyManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"entropyStorage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"finished\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getEntropy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getOwnedTokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenOrigin\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"hasEntropy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idGenerator\",\"outputs\":[{\"internalType\":\"contract IScoutsIdGenerator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadata_uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_randomSeeds\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_reedemerName\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_generatorTokenId\",\"type\":\"uint256\"}],\"name\":\"mintScout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_attribute\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"setAttribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_dna\",\"type\":\"string\"}],\"name\":\"setDNA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_randomness\",\"type\":\"uint256\"}],\"name\":\"setEntropy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entropyManager\",\"type\":\"address\"}],\"name\":\"setEntropyManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newIdGenerator\",\"type\":\"address\"}],\"name\":\"setIdGenerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_new_uri\",\"type\":\"string\"}],\"name\":\"setMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"tokenAttributes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenDNA\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenGenerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"withdrawERC20(address,uint256)\":{\"details\":\"Withdraw function to avoid locking tokens in the contract\"},\"withdrawNFT(address,uint256)\":{\"details\":\"Emergency method to withdraw NFT in case someone sends..\"}},\"stateVariables\":{\"tokenGenerator\":{\"details\":\"Maps the YouthScout id to the original redeemer and its local token\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"hasEntropy(uint256,uint256)\":{\"notice\":\"Default values will be false\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Scouts.sol\":\"YouthScouts\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe5f33b553368181a44ff0c77942ed831152bfa731bc4d1c12a363ef6918366b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x693d1a6333975d5bd166fcc844874f96affecbf45dc5c34fa7d172248d74c06b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa1b27b3f44ff825974e5268e8f63ad3b03add5b464880d860fbb8cae043e17f7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x6881efb8fa7b41a7a7c2e6e5b31f0f19d0735a6485f2912f8db5802546aeaf16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x86ebc6cea2b539c2d4a79a4754f7c90c43c45c9aaf0aab32ecffb1565afc5e0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x53a0bb51b8a505e04aaf065de27c0e31cadf38194f8a9a6ec92b7bcd3c5826e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x842c66d5965ed0bf77f274732c2a93a7e2223d53171ec9cccc473bde75104ead\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x1ba5cf152c15dc0c785310feeb61e1f74387fc7bdc2aba5d90733f791606d4bf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x872ba21af7c1f0ae04a715beca31e8fcac764d6c8762940b0fe1bfb6ed8e86f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x483b106386dd309f168672928252a19f30c30efb4d17d4b8e2b0f587ca784a11\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x683793c78df81fc9033105d5c5e7173a3a295f94b55435129a385514213637e2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x42c041cfe2fba75264baa64c4c3c55b128e6667b54331df87028cc4da0a9606e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6052c25b1021f2b0e733fb52ca11948cb2f08cb66076397507243a6e8a8d7776\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5fa25f305839292fab713256214f2868e0257d29826b14282bbd7f1e34f5af38\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n        return computedHash;\\n    }\\n}\\n\",\"keccak256\":\"0x972240f593e01b2fae2e90c5b94260f4971f03076363a38a3f4fff105efbba8b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x905cd0ecd91d1de79a4679d745b79cf852ca8ccda5d25d1c49c6bd17a5edc0cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6aa521718bf139b44ce56f194f6aea1d590cacef995b5a84703fb1579fa49be9\",\"license\":\"MIT\"},\"contracts/EntropyStorage.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @dev Simple class to store the entropy we fetch\\n * from the IEntropyManager, although perhaps more\\n * sources could come from the future.\\n *\\n * We are splitting this into a separate SC because incoming\\n * ERC721 will share exactly the same logic so it makes sense\\n * to share it.\\n */\\ncontract EntropyStorage is AccessControl {\\n\\n  ///@dev So only the EntropyManager can set the entropy\\n  bytes32 public constant SET_ENTROPY_ROLE = keccak256(\\\"SET_ENTROPY_ROLE\\\");\\n\\n  struct Entropy {\\n    ///@dev Just in the improbable case that the entropy is just 0\\n    bool    finished;\\n    uint256 value;\\n  }\\n\\n  constructor() {\\n    _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n  }\\n\\n  ///@dev Mapping from tokenId to index to actual entropy value\\n  ///@dev Entropy in polygon is cheap so we want the possibility of having more\\n  mapping(uint256 => mapping(uint256 => Entropy)) public entropyStorage;\\n\\n  ///Default values will be false\\n  function hasEntropy(uint256 _tokenId, uint256 _index) public view returns (bool) {\\n    return entropyStorage[_tokenId][_index].finished;\\n  }\\n  \\n  function getEntropy(uint256 _tokenId, uint256 _index) public view returns (uint256) {\\n    require(hasEntropy(_tokenId, _index), \\\"Queried non-existent entropy\\\");\\n    return entropyStorage[_tokenId][_index].value;\\n  }\\n\\n  function setEntropy(uint256 _tokenId, uint256 _index, uint256 _randomness) external onlyRole(SET_ENTROPY_ROLE) {\\n    Entropy memory entropy = entropyStorage[_tokenId][_index];\\n    ///@notice Once set, entropy can't be changed\\n    require(entropy.finished == false, \\\"Setting existent entropy\\\");\\n    entropy.value = _randomness;\\n    entropy.finished = true;\\n    entropyStorage[_tokenId][_index] = entropy;\\n  }\\n\\n}\",\"keccak256\":\"0x24fc5a8ad96c03618a4816b6640f0ad27c7f5f14c912f8bd6026b9beeca8b0e7\",\"license\":\"MIT\"},\"contracts/IEntropyManager.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n// SPDX-License-Identifier: MIT\\n\\n///@dev The interface we couple Scouts contract to\\ninterface IEntropyManager {\\n  function requestEntropy(address _address, uint256 _tokenId, uint256 _index) external;\\n}\",\"keccak256\":\"0x1b1e021964d331c9d7bac3a05122f6fffaf8fea4c09e498731213dc46665b54b\",\"license\":\"MIT\"},\"contracts/IScoutsIdGenerator.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"./Redeemers.sol\\\";\\n\\n///@dev The interface we couple Scouts contract to\\ninterface IScoutsIdGenerator {\\n  function getScoutId(uint8 _redeemerName, uint256 _tokenId) pure external returns (uint256);\\n}\",\"keccak256\":\"0xd82b3bc9e1da22cb4d56f614e074c4d075a963c92d3f8767b6046cd59a2ac657\",\"license\":\"MIT\"},\"contracts/Redeemers.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n// SPDX-License-Identifier: MIT\\n\\n/**\\n * @dev This library exists just to avoid typos and\\n * magic numbers when passing Types around and does so by sharing\\n * the Types between ScoutsIdGenerator and Redeemers\\n */\\n\\nenum RedeemersTypes { Tickets }\\n\",\"keccak256\":\"0x2a86da8e2418c4eef4ee58827930dd2167e20644e26a247a4eaa30b2b59d601d\",\"license\":\"MIT\"},\"contracts/Scouts.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"metasoccer-vouchers/contracts/Vouchers.sol\\\";\\nimport \\\"./EntropyStorage.sol\\\";\\nimport \\\"./IEntropyManager.sol\\\";\\nimport \\\"./IScoutsIdGenerator.sol\\\";\\nimport \\\"./TokenWithdraw.sol\\\";\\n\\ncontract YouthScouts is ERC721Enumerable, EntropyStorage, TokenWithdraw, ReentrancyGuard {\\n  using Strings for uint256;\\n\\n  bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n  bytes32 public constant SET_DNA_ROLE = keccak256(\\\"SET_DNA_ROLE\\\");\\n  bytes32 public constant SET_ATTRIBUTES_ROLE = keccak256(\\\"SET_ATTRIBUTES_ROLE\\\");\\n  \\n  mapping(uint256 => string) public tokenDNA;\\n  mapping(uint256 => mapping(string => string)) public tokenAttributes; \\n  /// @dev Maps the YouthScout id to the original redeemer and its local token\\n  mapping(uint256 => uint256[2]) public tokenGenerator;\\n\\n  IEntropyManager public entropyManager;\\n  IScoutsIdGenerator public idGenerator;\\n\\n  string public metadata_uri = \\\"https://metadata.metassocer.com/scouts\\\";\\n\\n  constructor(string memory _description, string memory _name, address _entropyManager, address _idGenerator) ERC721(_description, _name) {\\n    entropyManager = IEntropyManager(_entropyManager);\\n    idGenerator = IScoutsIdGenerator(_idGenerator);\\n  }\\n\\n  function supportsInterface(bytes4 _interfaceId) public view virtual override(ERC721Enumerable, AccessControl) returns (bool) {\\n    return super.supportsInterface(_interfaceId);\\n  }\\n\\n  // Minting should be called by external contract/account with minter role\\n  function mintScout(address _owner, uint8 _randomSeeds, uint8 _reedemerName, uint256 _generatorTokenId) external onlyRole(MINTER_ROLE) nonReentrant returns (uint256) {\\n    require(_owner != address(0), \\\"Invalid owner address\\\");\\n\\n    /// @dev getScoutId already checks taht _redeemerName and _generatorTokenId to be correct\\n    uint256 _tokenId = idGenerator.getScoutId(_reedemerName, _generatorTokenId);\\n    tokenGenerator[_tokenId][0] = _reedemerName;\\n    tokenGenerator[_tokenId][1] = _generatorTokenId;\\n\\n    for(uint i = 0; i < _randomSeeds; i++){\\n      entropyManager.requestEntropy(address(this), _tokenId, i);\\n    }\\n\\n    _safeMint(_owner, _tokenId);\\n    return _tokenId;\\n  }\\n\\n  function tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {\\n    return string(abi.encodePacked(metadata_uri, \\\"/\\\", _tokenId.toString()));\\n  }\\n\\n  function contractURI() public view returns (string memory) {\\n    return metadata_uri;\\n  }\\n\\n  function setDNA(uint256 _tokenId, string memory _dna) external onlyRole(SET_DNA_ROLE) {\\n    require(bytes(tokenDNA[_tokenId]).length == 0, \\\"DNA already exists\\\");\\n    tokenDNA[_tokenId] = _dna;\\n  }\\n\\n  function setAttribute(uint256 _tokenId, string memory _attribute, string memory _value) external onlyRole(SET_ATTRIBUTES_ROLE) {\\n    tokenAttributes[_tokenId][_attribute] = _value;\\n  }\\n\\n  function burnToken(uint256 _tokenId) external {\\n    require(_isApprovedOrOwner(msg.sender, _tokenId), \\\"Sender is not owner nor approved\\\");\\n    _burn(_tokenId);\\n  }\\n\\n  function setMetadataURI(string memory _new_uri) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    metadata_uri = _new_uri;\\n  }\\n\\n  function setEntropyManager(address _entropyManager) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    entropyManager = IEntropyManager(_entropyManager);\\n  }\\n\\n  function setIdGenerator(address _newIdGenerator) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    idGenerator = IScoutsIdGenerator(_newIdGenerator);\\n  }\\n\\n  function getTokenOrigin(uint256 _tokenId) external view returns(uint256[2] memory) {\\n    return tokenGenerator[_tokenId];\\n  }\\n\\n  function getOwnedTokenIds(address owner) external view returns (uint256[] memory) {\\n    uint256[] memory ret = new uint256[](balanceOf(owner));\\n    for (uint256 i = 0; i < balanceOf(owner); i++) {\\n        ret[i] = tokenOfOwnerByIndex(owner, i);\\n    }\\n    return ret;\\n  }\\n}\",\"keccak256\":\"0x71d01d5ab083763a1394d0dc606eed827e5b1ae8038fda002c956e3cee673c7d\",\"license\":\"MIT\"},\"contracts/TokenWithdraw.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\n/**\\n * @dev ScoutsIdGenerator implementation\\n *\\n * When we generate the scouts skills and properties we take into account not\\n * only the random number(s) that comes along with it but also which contract\\n * minted it. We call such contract a Redeemer.\\n *\\n * We are starting with just one Redeemer (Tickets) that uses from id 0 to 4699;\\n *\\n */\\ncontract TokenWithdraw is AccessControl {\\n\\n  constructor() {\\n    _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n  }\\n\\n  ///@dev Withdraw function to avoid locking tokens in the contract\\n  function withdrawERC20(address _address, uint256 _amount) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    ERC20(_address).transfer(msg.sender, _amount);\\n  }\\n\\n  ///@dev Emergency method to withdraw NFT in case someone sends..\\n  function withdrawNFT(address _token, uint256 _tokenId) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n      ERC721(_token).safeTransferFrom(address(this), msg.sender, _tokenId);\\n  }\\n}\",\"keccak256\":\"0xc6f953fe357d9cf21839bd2cade3c31c752ad8dcc18085733d1ffd7ca51f39f7\",\"license\":\"MIT\"},\"metasoccer-vouchers/contracts/Vouchers.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n// SPDX-License-Identifier: (CC-BY-NC-ND-3.0)\\n// Code and docs are CC-BY-NC-ND-3.0\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport {Base64} from \\\"./libraries/Base64.sol\\\";\\n\\ncontract Vouchers is ERC721Enumerable, Ownable, Pausable, ReentrancyGuard {\\n    using Strings for uint256;\\n\\n    address public mintingToken = 0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063;\\n\\n    event NewDropCreated(bytes32 drop, bytes32 root);\\n\\n    struct DropInfo {\\n        uint16 totalNumber;\\n        uint16 soldNum;\\n        uint16 maxAllowed;\\n    }\\n\\n    struct Drop {\\n        bytes32 root;\\n        uint256 price;\\n        uint16 minPurchase;\\n        uint16 maxPurchase;\\n        bool started;\\n        DropInfo goalkeepers;\\n        DropInfo defenders;\\n        DropInfo midfielders;\\n        DropInfo attackers;\\n    }\\n\\n    mapping(address => mapping(bytes32 => mapping(string => uint16)))\\n        public buysPerDrop;\\n    mapping(bytes32 => Drop) public drops;\\n    mapping(uint256 => string) public voucherTypes;\\n    mapping(string => string) private imageURLs;\\n    mapping(string => string) private animationURLs;\\n    string private externalUrl = 'https://metasoccer.com/';\\n\\n    string private constant GOALKEEPER = \\\"Goalkeeper\\\";\\n    string private constant DEFENDER = \\\"Defender\\\";\\n    string private constant MIDFIELDER = \\\"Midfielder\\\";\\n    string private constant ATTACKER = \\\"Forward\\\";\\n    string private constant ERROR_WRONG_QTY = \\\"ERROR_WRONG_QTY\\\";\\n\\n    // Keep count of burned tickets to avoid potential issues with minting and type tracking\\n    uint256 public burnedCount;\\n\\n    constructor() ERC721(\\\"MetaSoccer Youth Scout Tickets\\\", \\\"MSYST\\\") {}\\n\\n    function pause(bool stop) external onlyOwner {\\n        if (stop) {\\n            _pause();\\n        } else {\\n            _unpause();\\n        }\\n    }\\n\\n    function setDrop(bytes32 drop, Drop memory _drop) external onlyOwner {\\n        drops[drop] = _drop;\\n        emit NewDropCreated(drop, _drop.root);\\n    }\\n\\n    function buyVouchers(\\n        bytes32 drop,\\n        bytes32[] calldata proof,\\n        uint16 qtyGKs,\\n        uint16 qtyDFs,\\n        uint16 qtyMFs,\\n        uint16 qtyAKs\\n    ) external nonReentrant {\\n        require(!paused(), \\\"buy while paused\\\");\\n        require(drops[drop].started, \\\"drop not started\\\");\\n        require(drops[drop].root != keccak256(\\\"0\\\"), \\\"drop does not exist\\\");\\n\\n        // Check for whitelist\\n        if (drops[drop].root != \\\"\\\") {\\n            require(\\n                _verify(_leaf(msg.sender), proof, drop),\\n                \\\"Invalid merkle proof\\\"\\n            );\\n        }\\n\\n        // Vouchers should be available at drop level\\n        require(\\n            drops[drop].goalkeepers.soldNum + qtyGKs <=\\n                drops[drop].goalkeepers.totalNumber,\\n            ERROR_WRONG_QTY\\n        );\\n        require(\\n            drops[drop].defenders.soldNum + qtyDFs <=\\n                drops[drop].defenders.totalNumber,\\n            ERROR_WRONG_QTY\\n        );\\n        require(\\n            drops[drop].midfielders.soldNum + qtyMFs <=\\n                drops[drop].midfielders.totalNumber,\\n            ERROR_WRONG_QTY\\n        );\\n        require(\\n            drops[drop].attackers.soldNum + qtyAKs <=\\n                drops[drop].attackers.totalNumber,\\n            ERROR_WRONG_QTY\\n        );\\n\\n        // Should buy more than minimum required by drop and less than total allowed per type\\n        uint16 totalQty = qtyGKs + qtyDFs + qtyMFs + qtyAKs;\\n        uint16 previousQty = buysPerDrop[msg.sender][drop][GOALKEEPER] +\\n            buysPerDrop[msg.sender][drop][DEFENDER] +\\n            buysPerDrop[msg.sender][drop][MIDFIELDER] +\\n            buysPerDrop[msg.sender][drop][ATTACKER];\\n        require(\\n            totalQty + previousQty >= drops[drop].minPurchase,\\n            ERROR_WRONG_QTY\\n        );\\n        require(\\n            totalQty + previousQty <= drops[drop].maxPurchase,\\n            ERROR_WRONG_QTY\\n        );\\n\\n        // Should buy less than total allowed per type per drop\\n        require(\\n            qtyGKs + buysPerDrop[msg.sender][drop][GOALKEEPER] <=\\n                drops[drop].goalkeepers.maxAllowed,\\n            ERROR_WRONG_QTY\\n        );\\n        require(\\n            qtyDFs + buysPerDrop[msg.sender][drop][DEFENDER] <=\\n                drops[drop].defenders.maxAllowed,\\n            ERROR_WRONG_QTY\\n        );\\n        require(\\n            qtyMFs + buysPerDrop[msg.sender][drop][MIDFIELDER] <=\\n                drops[drop].midfielders.maxAllowed,\\n            ERROR_WRONG_QTY\\n        );\\n        require(\\n            qtyAKs + buysPerDrop[msg.sender][drop][ATTACKER] <=\\n                drops[drop].attackers.maxAllowed,\\n            ERROR_WRONG_QTY\\n        );\\n\\n        uint256 amount = totalQty * drops[drop].price;\\n        require(\\n            IERC20(mintingToken).transferFrom(msg.sender, this.owner(), amount),\\n            \\\"Unable to receive payment\\\"\\n        );\\n\\n        drops[drop].goalkeepers.soldNum =\\n            drops[drop].goalkeepers.soldNum +\\n            qtyGKs;\\n        drops[drop].defenders.soldNum = drops[drop].defenders.soldNum + qtyDFs;\\n        drops[drop].midfielders.soldNum =\\n            drops[drop].midfielders.soldNum +\\n            qtyMFs;\\n        drops[drop].attackers.soldNum = drops[drop].attackers.soldNum + qtyAKs;\\n\\n        _mintForDrop(drop, GOALKEEPER, qtyGKs);\\n        _mintForDrop(drop, DEFENDER, qtyDFs);\\n        _mintForDrop(drop, MIDFIELDER, qtyMFs);\\n        _mintForDrop(drop, ATTACKER, qtyAKs);\\n    }\\n\\n    function _mintForDrop(\\n        bytes32 _drop,\\n        string memory _type,\\n        uint16 _qty\\n    ) internal {\\n        for (uint256 i = 0; i < _qty; ++i) {\\n            voucherTypes[totalSupply() + burnedCount] = _type;\\n            ++buysPerDrop[msg.sender][_drop][_type];\\n            _safeMint(msg.sender, totalSupply() + burnedCount);\\n        }\\n    }\\n\\n    function _leaf(address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(account));\\n    }\\n\\n    function _verify(\\n        bytes32 leaf,\\n        bytes32[] memory proof,\\n        bytes32 drop\\n    ) internal view returns (bool) {\\n        return MerkleProof.verify(proof, drops[drop].root, leaf);\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        require(_exists(tokenId), \\\"nonexistent token\\\");\\n        string memory voucherType = voucherTypes[tokenId];\\n        string memory json = Base64.encode(\\n            bytes(\\n                string(\\n                    abi.encodePacked(\\n                        '{\\\"name\\\": \\\"',\\n                        voucherType, ' Ticket',\\n                        '\\\",\\\"description\\\": \\\"',\\n                        'MetaSoccer Youth Scouts presale: tickets will be redeemable for actual Youth Scouts.',\\n                        '\\\",\\\"external_url\\\": \\\"',\\n                        externalUrl,\\n                        '\\\",\\\"image\\\": \\\"',\\n                        imageURLs[voucherType],\\n                        '\\\",\\\"animation_url\\\": \\\"',\\n                        animationURLs[voucherType],\\n                        '\\\",\\\"attributes\\\": [{',\\n                            '\\\"trait_type\\\": \\\"Covering\\\",',\\n                            '\\\"value\\\": \\\"',\\n                            voucherType,\\n                            '\\\"}]',\\n                        '}'\\n                    )\\n                )\\n            )\\n        );\\n\\n        string memory finalTokenUri = string(\\n            abi.encodePacked(\\\"data:application/json;base64,\\\", json)\\n        );\\n        return finalTokenUri;\\n    }\\n\\n    function toggleDropStarted(bytes32 _drop) external onlyOwner {\\n        drops[_drop].started = !drops[_drop].started;\\n    }\\n\\n    function setDropWhitelist(bytes32 _drop, bytes32 _root) external onlyOwner {\\n        drops[_drop].root = _root;\\n    }\\n\\n    function setMintingToken(address _new_minting_token) external onlyOwner {\\n        mintingToken = _new_minting_token;\\n    }\\n\\n    function setExternalUrl(string memory _url) external onlyOwner {\\n        externalUrl = _url;\\n    }\\n\\n    function setImageUrl(string memory _covering, string memory _url) external onlyOwner {\\n        imageURLs[_covering] = _url;\\n    }\\n\\n    function setAnimationUrl(string memory _covering, string memory _url) external onlyOwner {\\n        animationURLs[_covering] = _url;\\n    }\\n\\n    function mintForGiveaway(uint256 _num_to_mint, string memory _type) external onlyOwner {\\n        for (uint256 i = 0; i < _num_to_mint; ++i) {\\n            voucherTypes[totalSupply() + burnedCount] = _type;\\n            _safeMint(msg.sender, totalSupply() + burnedCount);\\n        }\\n    }\\n\\n    function burnToken(uint256 _token_id) external {\\n        require(\\n            _isApprovedOrOwner(msg.sender, _token_id),\\n            \\\"Sender is not owner nor approved\\\"\\n        );\\n        burnedCount++;\\n        _burn(_token_id);\\n    }\\n\\n    function getAllVouchers() external view returns (string[] memory) {\\n        string[] memory ret = new string[](totalSupply() + burnedCount);\\n        for (uint256 i = 0; i < totalSupply() + burnedCount; i++) {\\n            ret[i] = voucherTypes[i];\\n        }\\n        return ret;\\n    }\\n\\n    function getAllOwned(address owner) external view returns (string[] memory) {\\n        string[] memory ret = new string[](balanceOf(owner));\\n        for (uint256 i = 0; i < balanceOf(owner); i++) {\\n            ret[i] = voucherTypes[tokenOfOwnerByIndex(owner, i)];\\n        }\\n        return ret;\\n    }\\n\\n    function getDropsById(bytes32[] calldata dropIds)\\n        external\\n        view\\n        returns (Drop[] memory)\\n    {\\n        require(dropIds.length <= 50, \\\"max amount of dropIds given\\\");\\n\\n        Drop[] memory d = new Drop[](dropIds.length);\\n        for (uint16 i = 0; i < dropIds.length; i++) {\\n            bytes32 id = dropIds[i];\\n            d[i] = drops[id];\\n        }\\n        return d;\\n    }\\n}\\n\",\"keccak256\":\"0x92c5f4359aebdae8946ed39d052e2be9ac9350f14b9a1c5a6f88f2ff90a574be\",\"license\":\"(CC-BY-NC-ND-3.0)\"},\"metasoccer-vouchers/contracts/libraries/Base64.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2021-09-05\\n */\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// [MIT License]\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos <brecht@loopring.org>\\nlibrary Base64 {\\n    bytes internal constant TABLE =\\n        'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n    /// @notice Encodes some bytes to the base64 representation\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        uint256 len = data.length;\\n        if (len == 0) return '';\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n        // Add some extra buffer at the end\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        bytes memory table = TABLE;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n\\n            } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(\\n                    out,\\n                    and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF)\\n                )\\n                out := shl(8, out)\\n                out := add(\\n                    out,\\n                    and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF)\\n                )\\n                out := shl(8, out)\\n                out := add(\\n                    out,\\n                    and(mload(add(tablePtr, and(input, 0x3F))), 0xFF)\\n                )\\n                out := shl(224, out)\\n\\n                mstore(resultPtr, out)\\n\\n                resultPtr := add(resultPtr, 4)\\n            }\\n\\n            switch mod(len, 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n\\n            mstore(result, encodedLen)\\n        }\\n\\n        return string(result);\\n    }\\n}\",\"keccak256\":\"0xc5ddc686da8f851f8441d23135c7d784331de261ece494b9a9403ca5f59f4b34\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040526026608081815290620031b860a0398051620000299160129160209091019062000196565b503480156200003757600080fd5b50604051620031de380380620031de8339810160408190526200005a9162000326565b8351849084906200007390600090602085019062000196565b5080516200008990600190602084019062000196565b506200009b91506000905033620000e2565b620000a8600033620000e2565b6001600c55601080546001600160a01b039384166001600160a01b0319918216179091556011805492909316911617905550620003f29050565b620000ee8282620000f2565b5050565b6000828152600a602090815260408083206001600160a01b038516845290915290205460ff16620000ee576000828152600a602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620001523390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b828054620001a490620003b5565b90600052602060002090601f016020900481019282620001c8576000855562000213565b82601f10620001e357805160ff191683800117855562000213565b8280016001018555821562000213579182015b8281111562000213578251825591602001919060010190620001f6565b506200022192915062000225565b5090565b5b8082111562000221576000815560010162000226565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200026457600080fd5b81516001600160401b03808211156200028157620002816200023c565b604051601f8301601f19908116603f01168101908282118183101715620002ac57620002ac6200023c565b81604052838152602092508683858801011115620002c957600080fd5b600091505b83821015620002ed5785820183015181830184015290820190620002ce565b83821115620002ff5760008385830101525b9695505050505050565b80516001600160a01b03811681146200032157600080fd5b919050565b600080600080608085870312156200033d57600080fd5b84516001600160401b03808211156200035557600080fd5b620003638883890162000252565b955060208701519150808211156200037a57600080fd5b50620003898782880162000252565b9350506200039a6040860162000309565b9150620003aa6060860162000309565b905092959194509250565b600181811c90821680620003ca57607f821691505b60208210811415620003ec57634e487b7160e01b600052602260045260246000fd5b50919050565b612db680620004026000396000f3fe608060405234801561001057600080fd5b50600436106102a05760003560e01c8063750521f511610167578063c807eee9116100ce578063e8a3d48511610087578063e8a3d48514610688578063e985e9c514610690578063ea276848146106a3578063efaf5c36146106b6578063fa485ab4146106c9578063fa5eec10146106dc57600080fd5b8063c807eee9146105ee578063c87b56dd14610601578063ca9ef52b14610614578063d53913931461063b578063d547741f14610662578063e7bd92b91461067557600080fd5b8063a217fddf11610120578063a217fddf1461057e578063a22cb46514610586578063b88d4fde14610599578063b960663b146105ac578063be65d751146105d3578063bf7f9f52146105e657600080fd5b8063750521f5146105175780637b47ec1a1461052a57806387881ce81461053d57806391d148541461055057806395d89b4114610563578063a1db97821461056b57600080fd5b80633c1a40201161020b5780635514a4a8116101c45780635514a4a8146104845780636088e93a146104975780636117c1f9146104aa5780636352211e146104ca5780636d1fce2c146104dd57806370a082311461050457600080fd5b80633c1a4020146103c95780633f879c22146103dc57806342842e0e146103ef5780634c5181c9146104025780634f6ccce7146104515780634fac7e411461046457600080fd5b8063248a9ca31161025d578063248a9ca3146103475780632f2ff15d1461036a5780632f745c591461037d5780632fb7b9511461039057806336568abe146103a3578063392bb0f3146103b657600080fd5b806301ffc9a7146102a557806306fdde03146102cd578063081812fc146102e2578063095ea7b31461030d57806318160ddd1461032257806323b872dd14610334575b600080fd5b6102b86102b3366004612490565b61070a565b60405190151581526020015b60405180910390f35b6102d561071b565b6040516102c49190612505565b6102f56102f0366004612518565b6107ad565b6040516001600160a01b0390911681526020016102c4565b61032061031b36600461254d565b61083a565b005b6008545b6040519081526020016102c4565b610320610342366004612577565b61094b565b610326610355366004612518565b6000908152600a602052604090206001015490565b6103206103783660046125b3565b61097c565b61032661038b36600461254d565b6109a2565b6010546102f5906001600160a01b031681565b6103206103b13660046125b3565b610a38565b6103206103c43660046125df565b610ab6565b6103266103d736600461260b565b610b9c565b6103266103ea36600461260b565b610c26565b6103206103fd366004612577565b610c4b565b61043a61041036600461260b565b600b6020908152600092835260408084209091529082529020805460019091015460ff9091169082565b6040805192151583526020830191909152016102c4565b61032661045f366004612518565b610c66565b61047761047236600461262d565b610cf9565b6040516102c49190612648565b610320610492366004612737565b610d9c565b6103206104a536600461254d565b610e11565b6104bd6104b8366004612518565b610e88565b6040516102c491906127a3565b6102f56104d8366004612518565b610ecf565b6103267fddddc85fb591517168f442e3f061420733f94e9f166110385de7239da005262c81565b61032661051236600461262d565b610f46565b6103206105253660046127d4565b610fcd565b610320610538366004612518565b610fec565b61032661054b366004612819565b61104e565b6102b861055e3660046125b3565b611268565b6102d5611293565b61032061057936600461254d565b6112a2565b610326600081565b610320610594366004612872565b611334565b6103206105a73660046128a9565b61133f565b6103267fa6ad6034f945b9833b20bf0136e79fd319e849cdcdc9abaa6cad9f43907350c381565b6102d56105e1366004612518565b611371565b6102d561140b565b6103206105fc36600461262d565b611418565b6102d561060f366004612518565b611447565b6103267f4ed81d1b25e5f8d96fa8676ce75abf9ddca3fb6c7f8974e5cfc5842062cbbe1a81565b6103267f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6103206106703660046125b3565b61147b565b6011546102f5906001600160a01b031681565b6102d56114a1565b6102b861069e366004612924565b6114b0565b6103206106b136600461294e565b6114de565b6103206106c436600461262d565b611585565b6102d56106d736600461294e565b6115b4565b6102b86106ea36600461260b565b6000918252600b6020908152604080842092845291905290205460ff1690565b6000610715826115e9565b92915050565b60606000805461072a90612994565b80601f016020809104026020016040519081016040528092919081815260200182805461075690612994565b80156107a35780601f10610778576101008083540402835291602001916107a3565b820191906000526020600020905b81548152906001019060200180831161078657829003601f168201915b5050505050905090565b60006107b88261160e565b61081e5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061084582610ecf565b9050806001600160a01b0316836001600160a01b031614156108b35760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610815565b336001600160a01b03821614806108cf57506108cf81336114b0565b61093c5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b6064820152608401610815565b610946838361162b565b505050565b6109553382611699565b6109715760405162461bcd60e51b8152600401610815906129cf565b610946838383611763565b6000828152600a602052604090206001015461099881336118fc565b6109468383611960565b60006109ad83610f46565b8210610a0f5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610815565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6001600160a01b0381163314610aa85760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610815565b610ab282826119e6565b5050565b7f4ed81d1b25e5f8d96fa8676ce75abf9ddca3fb6c7f8974e5cfc5842062cbbe1a610ae181336118fc565b6000848152600b602090815260408083208684528252918290208251808401909352805460ff16158015845260019091015491830191909152610b615760405162461bcd60e51b815260206004820152601860248201527753657474696e67206578697374656e7420656e74726f707960401b6044820152606401610815565b602081810193845260018083526000968752600b8252604080882096885295909152939094209351845460ff19169015151784555051910155565b6000828152600b6020908152604080832084845290915281205460ff16610c055760405162461bcd60e51b815260206004820152601c60248201527f51756572696564206e6f6e2d6578697374656e7420656e74726f7079000000006044820152606401610815565b506000918252600b6020908152604080842092845291905290206001015490565b600f6020528160005260406000208160028110610c4257600080fd5b01549150829050565b6109468383836040518060200160405280600081525061133f565b6000610c7160085490565b8210610cd45760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610815565b60088281548110610ce757610ce7612a20565b90600052602060002001549050919050565b60606000610d0683610f46565b6001600160401b03811115610d1d57610d1d61268c565b604051908082528060200260200182016040528015610d46578160200160208202803683370190505b50905060005b610d5584610f46565b811015610d9557610d6684826109a2565b828281518110610d7857610d78612a20565b602090810291909101015280610d8d81612a4c565b915050610d4c565b5092915050565b7fa6ad6034f945b9833b20bf0136e79fd319e849cdcdc9abaa6cad9f43907350c3610dc781336118fc565b81600e600086815260200190815260200160002084604051610de99190612a83565b90815260200160405180910390209080519060200190610e0a9291906123c3565b5050505050565b6000610e1d81336118fc565b604051632142170760e11b8152306004820152336024820152604481018390526001600160a01b038416906342842e0e90606401600060405180830381600087803b158015610e6b57600080fd5b505af1158015610e7f573d6000803e3d6000fd5b50505050505050565b610e90612447565b6000828152600f6020526040908190208151808301928390529160029082845b815481526020019060010190808311610eb05750505050509050919050565b6000818152600260205260408120546001600160a01b0316806107155760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610815565b60006001600160a01b038216610fb15760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610815565b506001600160a01b031660009081526003602052604090205490565b6000610fd981336118fc565b81516109469060129060208501906123c3565b610ff63382611699565b6110425760405162461bcd60e51b815260206004820181905260248201527f53656e646572206973206e6f74206f776e6572206e6f7220617070726f7665646044820152606401610815565b61104b81611a4d565b50565b60007f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a661107b81336118fc565b6002600c5414156110ce5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610815565b6002600c556001600160a01b0386166111215760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206f776e6572206164647265737360581b6044820152606401610815565b601154604051635f85621760e01b815260ff86166004820152602481018590526000916001600160a01b031690635f8562179060440160206040518083038186803b15801561116f57600080fd5b505afa158015611183573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a79190612a9f565b6000818152600f6020526040812060ff881681556001018690559091505b8660ff1681101561124e5760105460405163405abbab60e01b815230600482015260248101849052604481018390526001600160a01b039091169063405abbab90606401600060405180830381600087803b15801561122357600080fd5b505af1158015611237573d6000803e3d6000fd5b50505050808061124690612a4c565b9150506111c5565b506112598782611ae2565b6001600c559695505050505050565b6000918252600a602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60606001805461072a90612994565b60006112ae81336118fc565b60405163a9059cbb60e01b8152336004820152602481018390526001600160a01b0384169063a9059cbb90604401602060405180830381600087803b1580156112f657600080fd5b505af115801561130a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132e9190612ab8565b50505050565b610ab2338383611afc565b6113493383611699565b6113655760405162461bcd60e51b8152600401610815906129cf565b61132e84848484611bc7565b600d602052600090815260409020805461138a90612994565b80601f01602080910402602001604051908101604052809291908181526020018280546113b690612994565b80156114035780601f106113d857610100808354040283529160200191611403565b820191906000526020600020905b8154815290600101906020018083116113e657829003601f168201915b505050505081565b6012805461138a90612994565b600061142481336118fc565b50601080546001600160a01b0319166001600160a01b0392909216919091179055565b6060601261145483611bfa565b604051602001611465929190612ad5565b6040516020818303038152906040529050919050565b6000828152600a602052604090206001015461149781336118fc565b61094683836119e6565b60606012805461072a90612994565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b7fddddc85fb591517168f442e3f061420733f94e9f166110385de7239da005262c61150981336118fc565b6000838152600d60205260409020805461152290612994565b1590506115665760405162461bcd60e51b8152602060048201526012602482015271444e4120616c72656164792065786973747360701b6044820152606401610815565b6000838152600d60209081526040909120835161132e928501906123c3565b600061159181336118fc565b50601180546001600160a01b0319166001600160a01b0392909216919091179055565b600e60209081526000928352604090922081518083018401805192815290840192909301919091209152805461138a90612994565b60006001600160e01b03198216637965db0b60e01b1480610715575061071582611cf7565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061166082610ecf565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006116a48261160e565b6117055760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610815565b600061171083610ecf565b9050806001600160a01b0316846001600160a01b0316148061174b5750836001600160a01b0316611740846107ad565b6001600160a01b0316145b8061175b575061175b81856114b0565b949350505050565b826001600160a01b031661177682610ecf565b6001600160a01b0316146117de5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610815565b6001600160a01b0382166118405760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610815565b61184b838383611d1c565b61185660008261162b565b6001600160a01b038316600090815260036020526040812080546001929061187f908490612b8c565b90915550506001600160a01b03821660009081526003602052604081208054600192906118ad908490612ba3565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b038681169182179092559151849391871691600080516020612d6183398151915291a4505050565b6119068282611268565b610ab25761191e816001600160a01b03166014611dd4565b611929836020611dd4565b60405160200161193a929190612bbb565b60408051601f198184030181529082905262461bcd60e51b825261081591600401612505565b61196a8282611268565b610ab2576000828152600a602090815260408083206001600160a01b03851684529091529020805460ff191660011790556119a23390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6119f08282611268565b15610ab2576000828152600a602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000611a5882610ecf565b9050611a6681600084611d1c565b611a7160008361162b565b6001600160a01b0381166000908152600360205260408120805460019290611a9a908490612b8c565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b03841690600080516020612d61833981519152908390a45050565b610ab2828260405180602001604052806000815250611f76565b816001600160a01b0316836001600160a01b03161415611b5a5760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b6044820152606401610815565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611bd2848484611763565b611bde84848484611fa9565b61132e5760405162461bcd60e51b815260040161081590612c2a565b606081611c1e5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611c485780611c3281612a4c565b9150611c419050600a83612c92565b9150611c22565b6000816001600160401b03811115611c6257611c6261268c565b6040519080825280601f01601f191660200182016040528015611c8c576020820181803683370190505b5090505b841561175b57611ca1600183612b8c565b9150611cae600a86612ca6565b611cb9906030612ba3565b60f81b818381518110611cce57611cce612a20565b60200101906001600160f81b031916908160001a905350611cf0600a86612c92565b9450611c90565b60006001600160e01b0319821663780e9d6360e01b14806107155750610715826120b6565b6001600160a01b038316611d7757611d7281600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b611d9a565b816001600160a01b0316836001600160a01b031614611d9a57611d9a8382612106565b6001600160a01b038216611db157610946816121a3565b826001600160a01b0316826001600160a01b031614610946576109468282612252565b60606000611de3836002612cba565b611dee906002612ba3565b6001600160401b03811115611e0557611e0561268c565b6040519080825280601f01601f191660200182016040528015611e2f576020820181803683370190505b509050600360fc1b81600081518110611e4a57611e4a612a20565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611e7957611e79612a20565b60200101906001600160f81b031916908160001a9053506000611e9d846002612cba565b611ea8906001612ba3565b90505b6001811115611f20576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611edc57611edc612a20565b1a60f81b828281518110611ef257611ef2612a20565b60200101906001600160f81b031916908160001a90535060049490941c93611f1981612cd9565b9050611eab565b508315611f6f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610815565b9392505050565b611f808383612296565b611f8d6000848484611fa9565b6109465760405162461bcd60e51b815260040161081590612c2a565b60006001600160a01b0384163b156120ab57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611fed903390899088908890600401612cf0565b602060405180830381600087803b15801561200757600080fd5b505af1925050508015612037575060408051601f3d908101601f1916820190925261203491810190612d2d565b60015b612091573d808015612065576040519150601f19603f3d011682016040523d82523d6000602084013e61206a565b606091505b5080516120895760405162461bcd60e51b815260040161081590612c2a565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061175b565b506001949350505050565b60006001600160e01b031982166380ac58cd60e01b14806120e757506001600160e01b03198216635b5e139f60e01b145b8061071557506301ffc9a760e01b6001600160e01b0319831614610715565b6000600161211384610f46565b61211d9190612b8c565b600083815260076020526040902054909150808214612170576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906121b590600190612b8c565b600083815260096020526040812054600880549394509092849081106121dd576121dd612a20565b9060005260206000200154905080600883815481106121fe576121fe612a20565b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061223657612236612d4a565b6001900381819060005260206000200160009055905550505050565b600061225d83610f46565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b0382166122ec5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610815565b6122f58161160e565b156123425760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610815565b61234e60008383611d1c565b6001600160a01b0382166000908152600360205260408120805460019290612377908490612ba3565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051839290600080516020612d61833981519152908290a45050565b8280546123cf90612994565b90600052602060002090601f0160209004810192826123f15760008555612437565b82601f1061240a57805160ff1916838001178555612437565b82800160010185558215612437579182015b8281111561243757825182559160200191906001019061241c565b50612443929150612465565b5090565b60405180604001604052806002906020820280368337509192915050565b5b808211156124435760008155600101612466565b6001600160e01b03198116811461104b57600080fd5b6000602082840312156124a257600080fd5b8135611f6f8161247a565b60005b838110156124c85781810151838201526020016124b0565b8381111561132e5750506000910152565b600081518084526124f18160208601602086016124ad565b601f01601f19169290920160200192915050565b602081526000611f6f60208301846124d9565b60006020828403121561252a57600080fd5b5035919050565b80356001600160a01b038116811461254857600080fd5b919050565b6000806040838503121561256057600080fd5b61256983612531565b946020939093013593505050565b60008060006060848603121561258c57600080fd5b61259584612531565b92506125a360208501612531565b9150604084013590509250925092565b600080604083850312156125c657600080fd5b823591506125d660208401612531565b90509250929050565b6000806000606084860312156125f457600080fd5b505081359360208301359350604090920135919050565b6000806040838503121561261e57600080fd5b50508035926020909101359150565b60006020828403121561263f57600080fd5b611f6f82612531565b6020808252825182820181905260009190848201906040850190845b8181101561268057835183529284019291840191600101612664565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b60006001600160401b03808411156126bc576126bc61268c565b604051601f8501601f19908116603f011681019082821181831017156126e4576126e461268c565b816040528093508581528686860111156126fd57600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261272857600080fd5b611f6f838335602085016126a2565b60008060006060848603121561274c57600080fd5b8335925060208401356001600160401b038082111561276a57600080fd5b61277687838801612717565b9350604086013591508082111561278c57600080fd5b5061279986828701612717565b9150509250925092565b60408101818360005b60028110156127cb5781518352602092830192909101906001016127ac565b50505092915050565b6000602082840312156127e657600080fd5b81356001600160401b038111156127fc57600080fd5b61175b84828501612717565b803560ff8116811461254857600080fd5b6000806000806080858703121561282f57600080fd5b61283885612531565b935061284660208601612808565b925061285460408601612808565b9396929550929360600135925050565b801515811461104b57600080fd5b6000806040838503121561288557600080fd5b61288e83612531565b9150602083013561289e81612864565b809150509250929050565b600080600080608085870312156128bf57600080fd5b6128c885612531565b93506128d660208601612531565b92506040850135915060608501356001600160401b038111156128f857600080fd5b8501601f8101871361290957600080fd5b612918878235602084016126a2565b91505092959194509250565b6000806040838503121561293757600080fd5b61294083612531565b91506125d660208401612531565b6000806040838503121561296157600080fd5b8235915060208301356001600160401b0381111561297e57600080fd5b61298a85828601612717565b9150509250929050565b600181811c908216806129a857607f821691505b602082108114156129c957634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612a6057612a60612a36565b5060010190565b60008151612a798185602086016124ad565b9290920192915050565b60008251612a958184602087016124ad565b9190910192915050565b600060208284031215612ab157600080fd5b5051919050565b600060208284031215612aca57600080fd5b8151611f6f81612864565b600080845481600182811c915080831680612af157607f831692505b6020808410821415612b1157634e487b7160e01b86526022600452602486fd5b818015612b255760018114612b3657612b63565b60ff19861689528489019650612b63565b60008b81526020902060005b86811015612b5b5781548b820152908501908301612b42565b505084890196505b505050505050612b83612b7d82602f60f81b815260010190565b85612a67565b95945050505050565b600082821015612b9e57612b9e612a36565b500390565b60008219821115612bb657612bb6612a36565b500190565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351612bed8160178501602088016124ad565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612c1e8160288401602088016124ad565b01602801949350505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b600082612ca157612ca1612c7c565b500490565b600082612cb557612cb5612c7c565b500690565b6000816000190483118215151615612cd457612cd4612a36565b500290565b600081612ce857612ce8612a36565b506000190190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612d23908301846124d9565b9695505050505050565b600060208284031215612d3f57600080fd5b8151611f6f8161247a565b634e487b7160e01b600052603160045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220776b307e11b5372123d6f1c0b50a7449af859998af91bcfc10d8271a9686a0ad64736f6c6343000809003368747470733a2f2f6d657461646174612e6d65746173736f6365722e636f6d2f73636f757473",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102a05760003560e01c8063750521f511610167578063c807eee9116100ce578063e8a3d48511610087578063e8a3d48514610688578063e985e9c514610690578063ea276848146106a3578063efaf5c36146106b6578063fa485ab4146106c9578063fa5eec10146106dc57600080fd5b8063c807eee9146105ee578063c87b56dd14610601578063ca9ef52b14610614578063d53913931461063b578063d547741f14610662578063e7bd92b91461067557600080fd5b8063a217fddf11610120578063a217fddf1461057e578063a22cb46514610586578063b88d4fde14610599578063b960663b146105ac578063be65d751146105d3578063bf7f9f52146105e657600080fd5b8063750521f5146105175780637b47ec1a1461052a57806387881ce81461053d57806391d148541461055057806395d89b4114610563578063a1db97821461056b57600080fd5b80633c1a40201161020b5780635514a4a8116101c45780635514a4a8146104845780636088e93a146104975780636117c1f9146104aa5780636352211e146104ca5780636d1fce2c146104dd57806370a082311461050457600080fd5b80633c1a4020146103c95780633f879c22146103dc57806342842e0e146103ef5780634c5181c9146104025780634f6ccce7146104515780634fac7e411461046457600080fd5b8063248a9ca31161025d578063248a9ca3146103475780632f2ff15d1461036a5780632f745c591461037d5780632fb7b9511461039057806336568abe146103a3578063392bb0f3146103b657600080fd5b806301ffc9a7146102a557806306fdde03146102cd578063081812fc146102e2578063095ea7b31461030d57806318160ddd1461032257806323b872dd14610334575b600080fd5b6102b86102b3366004612490565b61070a565b60405190151581526020015b60405180910390f35b6102d561071b565b6040516102c49190612505565b6102f56102f0366004612518565b6107ad565b6040516001600160a01b0390911681526020016102c4565b61032061031b36600461254d565b61083a565b005b6008545b6040519081526020016102c4565b610320610342366004612577565b61094b565b610326610355366004612518565b6000908152600a602052604090206001015490565b6103206103783660046125b3565b61097c565b61032661038b36600461254d565b6109a2565b6010546102f5906001600160a01b031681565b6103206103b13660046125b3565b610a38565b6103206103c43660046125df565b610ab6565b6103266103d736600461260b565b610b9c565b6103266103ea36600461260b565b610c26565b6103206103fd366004612577565b610c4b565b61043a61041036600461260b565b600b6020908152600092835260408084209091529082529020805460019091015460ff9091169082565b6040805192151583526020830191909152016102c4565b61032661045f366004612518565b610c66565b61047761047236600461262d565b610cf9565b6040516102c49190612648565b610320610492366004612737565b610d9c565b6103206104a536600461254d565b610e11565b6104bd6104b8366004612518565b610e88565b6040516102c491906127a3565b6102f56104d8366004612518565b610ecf565b6103267fddddc85fb591517168f442e3f061420733f94e9f166110385de7239da005262c81565b61032661051236600461262d565b610f46565b6103206105253660046127d4565b610fcd565b610320610538366004612518565b610fec565b61032661054b366004612819565b61104e565b6102b861055e3660046125b3565b611268565b6102d5611293565b61032061057936600461254d565b6112a2565b610326600081565b610320610594366004612872565b611334565b6103206105a73660046128a9565b61133f565b6103267fa6ad6034f945b9833b20bf0136e79fd319e849cdcdc9abaa6cad9f43907350c381565b6102d56105e1366004612518565b611371565b6102d561140b565b6103206105fc36600461262d565b611418565b6102d561060f366004612518565b611447565b6103267f4ed81d1b25e5f8d96fa8676ce75abf9ddca3fb6c7f8974e5cfc5842062cbbe1a81565b6103267f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6103206106703660046125b3565b61147b565b6011546102f5906001600160a01b031681565b6102d56114a1565b6102b861069e366004612924565b6114b0565b6103206106b136600461294e565b6114de565b6103206106c436600461262d565b611585565b6102d56106d736600461294e565b6115b4565b6102b86106ea36600461260b565b6000918252600b6020908152604080842092845291905290205460ff1690565b6000610715826115e9565b92915050565b60606000805461072a90612994565b80601f016020809104026020016040519081016040528092919081815260200182805461075690612994565b80156107a35780601f10610778576101008083540402835291602001916107a3565b820191906000526020600020905b81548152906001019060200180831161078657829003601f168201915b5050505050905090565b60006107b88261160e565b61081e5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061084582610ecf565b9050806001600160a01b0316836001600160a01b031614156108b35760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610815565b336001600160a01b03821614806108cf57506108cf81336114b0565b61093c5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b6064820152608401610815565b610946838361162b565b505050565b6109553382611699565b6109715760405162461bcd60e51b8152600401610815906129cf565b610946838383611763565b6000828152600a602052604090206001015461099881336118fc565b6109468383611960565b60006109ad83610f46565b8210610a0f5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610815565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6001600160a01b0381163314610aa85760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610815565b610ab282826119e6565b5050565b7f4ed81d1b25e5f8d96fa8676ce75abf9ddca3fb6c7f8974e5cfc5842062cbbe1a610ae181336118fc565b6000848152600b602090815260408083208684528252918290208251808401909352805460ff16158015845260019091015491830191909152610b615760405162461bcd60e51b815260206004820152601860248201527753657474696e67206578697374656e7420656e74726f707960401b6044820152606401610815565b602081810193845260018083526000968752600b8252604080882096885295909152939094209351845460ff19169015151784555051910155565b6000828152600b6020908152604080832084845290915281205460ff16610c055760405162461bcd60e51b815260206004820152601c60248201527f51756572696564206e6f6e2d6578697374656e7420656e74726f7079000000006044820152606401610815565b506000918252600b6020908152604080842092845291905290206001015490565b600f6020528160005260406000208160028110610c4257600080fd5b01549150829050565b6109468383836040518060200160405280600081525061133f565b6000610c7160085490565b8210610cd45760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610815565b60088281548110610ce757610ce7612a20565b90600052602060002001549050919050565b60606000610d0683610f46565b6001600160401b03811115610d1d57610d1d61268c565b604051908082528060200260200182016040528015610d46578160200160208202803683370190505b50905060005b610d5584610f46565b811015610d9557610d6684826109a2565b828281518110610d7857610d78612a20565b602090810291909101015280610d8d81612a4c565b915050610d4c565b5092915050565b7fa6ad6034f945b9833b20bf0136e79fd319e849cdcdc9abaa6cad9f43907350c3610dc781336118fc565b81600e600086815260200190815260200160002084604051610de99190612a83565b90815260200160405180910390209080519060200190610e0a9291906123c3565b5050505050565b6000610e1d81336118fc565b604051632142170760e11b8152306004820152336024820152604481018390526001600160a01b038416906342842e0e90606401600060405180830381600087803b158015610e6b57600080fd5b505af1158015610e7f573d6000803e3d6000fd5b50505050505050565b610e90612447565b6000828152600f6020526040908190208151808301928390529160029082845b815481526020019060010190808311610eb05750505050509050919050565b6000818152600260205260408120546001600160a01b0316806107155760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610815565b60006001600160a01b038216610fb15760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610815565b506001600160a01b031660009081526003602052604090205490565b6000610fd981336118fc565b81516109469060129060208501906123c3565b610ff63382611699565b6110425760405162461bcd60e51b815260206004820181905260248201527f53656e646572206973206e6f74206f776e6572206e6f7220617070726f7665646044820152606401610815565b61104b81611a4d565b50565b60007f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a661107b81336118fc565b6002600c5414156110ce5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610815565b6002600c556001600160a01b0386166111215760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206f776e6572206164647265737360581b6044820152606401610815565b601154604051635f85621760e01b815260ff86166004820152602481018590526000916001600160a01b031690635f8562179060440160206040518083038186803b15801561116f57600080fd5b505afa158015611183573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a79190612a9f565b6000818152600f6020526040812060ff881681556001018690559091505b8660ff1681101561124e5760105460405163405abbab60e01b815230600482015260248101849052604481018390526001600160a01b039091169063405abbab90606401600060405180830381600087803b15801561122357600080fd5b505af1158015611237573d6000803e3d6000fd5b50505050808061124690612a4c565b9150506111c5565b506112598782611ae2565b6001600c559695505050505050565b6000918252600a602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60606001805461072a90612994565b60006112ae81336118fc565b60405163a9059cbb60e01b8152336004820152602481018390526001600160a01b0384169063a9059cbb90604401602060405180830381600087803b1580156112f657600080fd5b505af115801561130a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132e9190612ab8565b50505050565b610ab2338383611afc565b6113493383611699565b6113655760405162461bcd60e51b8152600401610815906129cf565b61132e84848484611bc7565b600d602052600090815260409020805461138a90612994565b80601f01602080910402602001604051908101604052809291908181526020018280546113b690612994565b80156114035780601f106113d857610100808354040283529160200191611403565b820191906000526020600020905b8154815290600101906020018083116113e657829003601f168201915b505050505081565b6012805461138a90612994565b600061142481336118fc565b50601080546001600160a01b0319166001600160a01b0392909216919091179055565b6060601261145483611bfa565b604051602001611465929190612ad5565b6040516020818303038152906040529050919050565b6000828152600a602052604090206001015461149781336118fc565b61094683836119e6565b60606012805461072a90612994565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b7fddddc85fb591517168f442e3f061420733f94e9f166110385de7239da005262c61150981336118fc565b6000838152600d60205260409020805461152290612994565b1590506115665760405162461bcd60e51b8152602060048201526012602482015271444e4120616c72656164792065786973747360701b6044820152606401610815565b6000838152600d60209081526040909120835161132e928501906123c3565b600061159181336118fc565b50601180546001600160a01b0319166001600160a01b0392909216919091179055565b600e60209081526000928352604090922081518083018401805192815290840192909301919091209152805461138a90612994565b60006001600160e01b03198216637965db0b60e01b1480610715575061071582611cf7565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061166082610ecf565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006116a48261160e565b6117055760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610815565b600061171083610ecf565b9050806001600160a01b0316846001600160a01b0316148061174b5750836001600160a01b0316611740846107ad565b6001600160a01b0316145b8061175b575061175b81856114b0565b949350505050565b826001600160a01b031661177682610ecf565b6001600160a01b0316146117de5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610815565b6001600160a01b0382166118405760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610815565b61184b838383611d1c565b61185660008261162b565b6001600160a01b038316600090815260036020526040812080546001929061187f908490612b8c565b90915550506001600160a01b03821660009081526003602052604081208054600192906118ad908490612ba3565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b038681169182179092559151849391871691600080516020612d6183398151915291a4505050565b6119068282611268565b610ab25761191e816001600160a01b03166014611dd4565b611929836020611dd4565b60405160200161193a929190612bbb565b60408051601f198184030181529082905262461bcd60e51b825261081591600401612505565b61196a8282611268565b610ab2576000828152600a602090815260408083206001600160a01b03851684529091529020805460ff191660011790556119a23390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6119f08282611268565b15610ab2576000828152600a602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000611a5882610ecf565b9050611a6681600084611d1c565b611a7160008361162b565b6001600160a01b0381166000908152600360205260408120805460019290611a9a908490612b8c565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b03841690600080516020612d61833981519152908390a45050565b610ab2828260405180602001604052806000815250611f76565b816001600160a01b0316836001600160a01b03161415611b5a5760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b6044820152606401610815565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611bd2848484611763565b611bde84848484611fa9565b61132e5760405162461bcd60e51b815260040161081590612c2a565b606081611c1e5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611c485780611c3281612a4c565b9150611c419050600a83612c92565b9150611c22565b6000816001600160401b03811115611c6257611c6261268c565b6040519080825280601f01601f191660200182016040528015611c8c576020820181803683370190505b5090505b841561175b57611ca1600183612b8c565b9150611cae600a86612ca6565b611cb9906030612ba3565b60f81b818381518110611cce57611cce612a20565b60200101906001600160f81b031916908160001a905350611cf0600a86612c92565b9450611c90565b60006001600160e01b0319821663780e9d6360e01b14806107155750610715826120b6565b6001600160a01b038316611d7757611d7281600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b611d9a565b816001600160a01b0316836001600160a01b031614611d9a57611d9a8382612106565b6001600160a01b038216611db157610946816121a3565b826001600160a01b0316826001600160a01b031614610946576109468282612252565b60606000611de3836002612cba565b611dee906002612ba3565b6001600160401b03811115611e0557611e0561268c565b6040519080825280601f01601f191660200182016040528015611e2f576020820181803683370190505b509050600360fc1b81600081518110611e4a57611e4a612a20565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611e7957611e79612a20565b60200101906001600160f81b031916908160001a9053506000611e9d846002612cba565b611ea8906001612ba3565b90505b6001811115611f20576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611edc57611edc612a20565b1a60f81b828281518110611ef257611ef2612a20565b60200101906001600160f81b031916908160001a90535060049490941c93611f1981612cd9565b9050611eab565b508315611f6f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610815565b9392505050565b611f808383612296565b611f8d6000848484611fa9565b6109465760405162461bcd60e51b815260040161081590612c2a565b60006001600160a01b0384163b156120ab57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611fed903390899088908890600401612cf0565b602060405180830381600087803b15801561200757600080fd5b505af1925050508015612037575060408051601f3d908101601f1916820190925261203491810190612d2d565b60015b612091573d808015612065576040519150601f19603f3d011682016040523d82523d6000602084013e61206a565b606091505b5080516120895760405162461bcd60e51b815260040161081590612c2a565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061175b565b506001949350505050565b60006001600160e01b031982166380ac58cd60e01b14806120e757506001600160e01b03198216635b5e139f60e01b145b8061071557506301ffc9a760e01b6001600160e01b0319831614610715565b6000600161211384610f46565b61211d9190612b8c565b600083815260076020526040902054909150808214612170576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906121b590600190612b8c565b600083815260096020526040812054600880549394509092849081106121dd576121dd612a20565b9060005260206000200154905080600883815481106121fe576121fe612a20565b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061223657612236612d4a565b6001900381819060005260206000200160009055905550505050565b600061225d83610f46565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b0382166122ec5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610815565b6122f58161160e565b156123425760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610815565b61234e60008383611d1c565b6001600160a01b0382166000908152600360205260408120805460019290612377908490612ba3565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051839290600080516020612d61833981519152908290a45050565b8280546123cf90612994565b90600052602060002090601f0160209004810192826123f15760008555612437565b82601f1061240a57805160ff1916838001178555612437565b82800160010185558215612437579182015b8281111561243757825182559160200191906001019061241c565b50612443929150612465565b5090565b60405180604001604052806002906020820280368337509192915050565b5b808211156124435760008155600101612466565b6001600160e01b03198116811461104b57600080fd5b6000602082840312156124a257600080fd5b8135611f6f8161247a565b60005b838110156124c85781810151838201526020016124b0565b8381111561132e5750506000910152565b600081518084526124f18160208601602086016124ad565b601f01601f19169290920160200192915050565b602081526000611f6f60208301846124d9565b60006020828403121561252a57600080fd5b5035919050565b80356001600160a01b038116811461254857600080fd5b919050565b6000806040838503121561256057600080fd5b61256983612531565b946020939093013593505050565b60008060006060848603121561258c57600080fd5b61259584612531565b92506125a360208501612531565b9150604084013590509250925092565b600080604083850312156125c657600080fd5b823591506125d660208401612531565b90509250929050565b6000806000606084860312156125f457600080fd5b505081359360208301359350604090920135919050565b6000806040838503121561261e57600080fd5b50508035926020909101359150565b60006020828403121561263f57600080fd5b611f6f82612531565b6020808252825182820181905260009190848201906040850190845b8181101561268057835183529284019291840191600101612664565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b60006001600160401b03808411156126bc576126bc61268c565b604051601f8501601f19908116603f011681019082821181831017156126e4576126e461268c565b816040528093508581528686860111156126fd57600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261272857600080fd5b611f6f838335602085016126a2565b60008060006060848603121561274c57600080fd5b8335925060208401356001600160401b038082111561276a57600080fd5b61277687838801612717565b9350604086013591508082111561278c57600080fd5b5061279986828701612717565b9150509250925092565b60408101818360005b60028110156127cb5781518352602092830192909101906001016127ac565b50505092915050565b6000602082840312156127e657600080fd5b81356001600160401b038111156127fc57600080fd5b61175b84828501612717565b803560ff8116811461254857600080fd5b6000806000806080858703121561282f57600080fd5b61283885612531565b935061284660208601612808565b925061285460408601612808565b9396929550929360600135925050565b801515811461104b57600080fd5b6000806040838503121561288557600080fd5b61288e83612531565b9150602083013561289e81612864565b809150509250929050565b600080600080608085870312156128bf57600080fd5b6128c885612531565b93506128d660208601612531565b92506040850135915060608501356001600160401b038111156128f857600080fd5b8501601f8101871361290957600080fd5b612918878235602084016126a2565b91505092959194509250565b6000806040838503121561293757600080fd5b61294083612531565b91506125d660208401612531565b6000806040838503121561296157600080fd5b8235915060208301356001600160401b0381111561297e57600080fd5b61298a85828601612717565b9150509250929050565b600181811c908216806129a857607f821691505b602082108114156129c957634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612a6057612a60612a36565b5060010190565b60008151612a798185602086016124ad565b9290920192915050565b60008251612a958184602087016124ad565b9190910192915050565b600060208284031215612ab157600080fd5b5051919050565b600060208284031215612aca57600080fd5b8151611f6f81612864565b600080845481600182811c915080831680612af157607f831692505b6020808410821415612b1157634e487b7160e01b86526022600452602486fd5b818015612b255760018114612b3657612b63565b60ff19861689528489019650612b63565b60008b81526020902060005b86811015612b5b5781548b820152908501908301612b42565b505084890196505b505050505050612b83612b7d82602f60f81b815260010190565b85612a67565b95945050505050565b600082821015612b9e57612b9e612a36565b500390565b60008219821115612bb657612bb6612a36565b500190565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351612bed8160178501602088016124ad565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612c1e8160288401602088016124ad565b01602801949350505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b600082612ca157612ca1612c7c565b500490565b600082612cb557612cb5612c7c565b500690565b6000816000190483118215151615612cd457612cd4612a36565b500290565b600081612ce857612ce8612a36565b506000190190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612d23908301846124d9565b9695505050505050565b600060208284031215612d3f57600080fd5b8151611f6f8161247a565b634e487b7160e01b600052603160045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220776b307e11b5372123d6f1c0b50a7449af859998af91bcfc10d8271a9686a0ad64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "withdrawERC20(address,uint256)": {
        "details": "Withdraw function to avoid locking tokens in the contract"
      },
      "withdrawNFT(address,uint256)": {
        "details": "Emergency method to withdraw NFT in case someone sends.."
      }
    },
    "stateVariables": {
      "tokenGenerator": {
        "details": "Maps the YouthScout id to the original redeemer and its local token"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "hasEntropy(uint256,uint256)": {
        "notice": "Default values will be false"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1658,
        "contract": "contracts/Scouts.sol:YouthScouts",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1660,
        "contract": "contracts/Scouts.sol:YouthScouts",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1664,
        "contract": "contracts/Scouts.sol:YouthScouts",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1668,
        "contract": "contracts/Scouts.sol:YouthScouts",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1672,
        "contract": "contracts/Scouts.sol:YouthScouts",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1678,
        "contract": "contracts/Scouts.sol:YouthScouts",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2612,
        "contract": "contracts/Scouts.sol:YouthScouts",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2616,
        "contract": "contracts/Scouts.sol:YouthScouts",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2619,
        "contract": "contracts/Scouts.sol:YouthScouts",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2623,
        "contract": "contracts/Scouts.sol:YouthScouts",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 290,
        "contract": "contracts/Scouts.sol:YouthScouts",
        "label": "_roles",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)285_storage)"
      },
      {
        "astId": 3966,
        "contract": "contracts/Scouts.sol:YouthScouts",
        "label": "entropyStorage",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Entropy)3948_storage))"
      },
      {
        "astId": 855,
        "contract": "contracts/Scouts.sol:YouthScouts",
        "label": "_status",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 4132,
        "contract": "contracts/Scouts.sol:YouthScouts",
        "label": "tokenDNA",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 4138,
        "contract": "contracts/Scouts.sol:YouthScouts",
        "label": "tokenAttributes",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_mapping(t_string_memory_ptr,t_string_storage))"
      },
      {
        "astId": 4145,
        "contract": "contracts/Scouts.sol:YouthScouts",
        "label": "tokenGenerator",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_array(t_uint256)2_storage)"
      },
      {
        "astId": 4148,
        "contract": "contracts/Scouts.sol:YouthScouts",
        "label": "entropyManager",
        "offset": 0,
        "slot": "16",
        "type": "t_contract(IEntropyManager)4073"
      },
      {
        "astId": 4151,
        "contract": "contracts/Scouts.sol:YouthScouts",
        "label": "idGenerator",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(IScoutsIdGenerator)4087"
      },
      {
        "astId": 4154,
        "contract": "contracts/Scouts.sol:YouthScouts",
        "label": "metadata_uri",
        "offset": 0,
        "slot": "18",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IEntropyManager)4073": {
        "encoding": "inplace",
        "label": "contract IEntropyManager",
        "numberOfBytes": "20"
      },
      "t_contract(IScoutsIdGenerator)4087": {
        "encoding": "inplace",
        "label": "contract IScoutsIdGenerator",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)285_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)285_storage"
      },
      "t_mapping(t_string_memory_ptr,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_uint256)2_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[2])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)2_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_string_memory_ptr,t_string_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(string => string))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_string_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Entropy)3948_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct EntropyStorage.Entropy))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Entropy)3948_storage)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Entropy)3948_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EntropyStorage.Entropy)",
        "numberOfBytes": "32",
        "value": "t_struct(Entropy)3948_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Entropy)3948_storage": {
        "encoding": "inplace",
        "label": "struct EntropyStorage.Entropy",
        "members": [
          {
            "astId": 3945,
            "contract": "contracts/Scouts.sol:YouthScouts",
            "label": "finished",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3947,
            "contract": "contracts/Scouts.sol:YouthScouts",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)285_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 282,
            "contract": "contracts/Scouts.sol:YouthScouts",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 284,
            "contract": "contracts/Scouts.sol:YouthScouts",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}